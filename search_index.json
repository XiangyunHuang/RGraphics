[
["index.html", "数据科学与 R 语言 Data Science with R 欢迎 Why R 目标读者 获取帮助 发展历史 记号约定 运行环境", " 数据科学与 R 语言 Data Science with R 黄湘云 2019-11-17 19:10:43 CST 欢迎 这本书还处于一个很早期的阶段 Why R GNU R 是发布在 GPL-2/3 下的开源自由软件，意味着只要你遵循该协议，就可以自由地获取、修改和发布R 源代码，R 本身的这种开源自由的属性，决定你可以免费地使用它。《The Art of R Programming》的作者 Norm Matloff 给出使用 R 语言的四个优势：它是统计学家开发的，也是为统计学家打造的；内建的矩阵类型和矩阵操作非常高效；不管是来自基础 R 还是 CRAN 上的绘图包，都提供强大的绘图功能；还有优秀的并行能力1，最近他更是在数据科学中全面比较了 R 与 Python2。关于 R 语言和 Python 语言的对比，网络上充斥着很多的文章，除了赞扬，还有表示反对的声音，如 R语言采用的对 GPL 协议3，甚至有人列举了逃离 R 语言阵营的10大上榜理由4，datacamp 提供了一份较为完整的对比图，仅供参考5。如果你是学统计的学生或者数据分析师，我都建议你先学习 R6，如果你是社会科学的学生和研究者， R 社区开发了 GUI 工具，如 Rcmdr 和 rattle，还有基于 Shiny 的分析工具 radiant 和类似 SPSS 的 JASP。 R 语言比较遭人诟病的大概有： R 包总体数量已达到 15000+，年度增长速度大约在 4.6% 左右，很多 R 包都在重复造轮子，且 R 包之间依赖关系非常复杂。若与 Python 作一个对比，所有的 R 包和 Python 模块必须处于活跃维护，拥有大批粉丝，维护者在社区内享有声誉，有厂子或科研经费支持。我们不打嘴仗，不下结论，只做对比，不完善之处还请大家指出并补充，见表 0.1。 每个 Base R 包内的函数非常多，参数也非常多，功能涉及方方面面，初学者学习起来难度非常大！数据处理和可视化常用基本包最流行的 tidyverse 系列和基础 R 系统存在很多不一致，在不清楚的情况下很难掌握，而陷于已有的函数不能自拔！ R 是面向对象的程序设计语言，是解释性的语言，也是函数式编程语言，包含的程序设计风格非常多，仅面向对象的设计就有 S3、 S4、 RC、 R5 和 R6。每一个操作都是函数调用，一切皆是对象的环境和闭包概念简洁又复杂。 R 内置的数据结构非常多，原子类型的有字符、布尔、整型、复数、双精度浮点、单精度浮点等，此外常见的还有数据框、列表。每个特定的领域往往还有特殊的类型，如时间序列 ts、zoo 等， 空间对象 sp、 raster 和 sf 等。 深入学习 R 实现的统计模型，如 lm、glm 等，你可能会发现统计学家的程序设计思维如此难懂。 Thomas Lumley, “R Fundamentals and Programming Techniques” https://faculty.washington.edu/tlumley/Rcourse/R-fundamentals.pdf 表 0.1: R 与 Python 常用模块对照表 比较内容 具体范围 R 包 Python 模块 数据获取 本地、数据库、远程 内置，RCurl、XML、rvest、data.table、 odbc scrapy 数据清理 正则表达式 内置，stringi、stringr、tidyr re 数据聚合 SQL支持的所有操作 内置，dplyr、purrr、dbplyr、sparklyr Numpy、Scipy、Pandas 数据分析 统计推断的所有方法 内置，lme4、rstan、mxnet、xgoost、 tensorflow xgboost、scikit-learn、tensorflow、mxnet 数据展示 数据可视化 内置，ggplot2、plotly matplotlib、bokeh、plotly 数据报告 网页文档、幻灯片 rmarkdown、bookdown、blogdown 数据落地 模型部署，调优，维护 plumber、opencpu、fiery 目标读者 本书起源于自己的学习笔记，侧重统计图形，当然也包括在制作统计图形之前的数据导入和ETL操作，后续的数据可视化。本书的目标可以是接触过 R 语言的读者，也可以是零基础者，书的内容侧重数据处理和可视化分析，数据建模的部分比较少。 获取帮助 R 语言官网给出了一份如何获取帮助的指导 https://www.r-project.org/help.html，RStudio 公司也总结了一份 Getting Help with R，又及 https://blog.rsquaredacademy.com/getting-help-in-r-updated/ 发展历史 GNU R 最初由 Ross Ihaka 和 Robert Gentleman 开发，它脱胎于 S 语言，S 语言形成于大名鼎鼎的美国贝尔实验室，距今已有40多年的历史了7，R语言的前世今生8，Ross Ihaka 总结了过去的经验，展望了 R 语言未来发展的方向9。 记号约定 写作风格，R 包名称都加粗表示，如 bookdown， rmarkdown 等，软件、编程语言名称保持原样，如 TinyTeX，LyX，TeXLive，R，Python，Stan，C++，SQL等，在代码块中，我们不使用R&gt;或+，代码输出结果用#&gt;注释。knitr (Xie 2015)、 bookdown (Xie 2016)、 Pandoc 和 TinyTeX ，请使用 XeLaTeX 编译这本书，等宽字体为 inconsolata 默认的文本字体为 Times 运行环境 重现书籍本节内容需要的 R 包列表如下 xfun::session_info(c(&quot;rmarkdown&quot;, &quot;bookdown&quot;)) #&gt; R Under development (unstable) (2019-11-17 r77427) #&gt; Platform: x86_64-pc-linux-gnu (64-bit) #&gt; Running under: Ubuntu 16.04.6 LTS #&gt; #&gt; Locale: #&gt; LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C #&gt; LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 #&gt; LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 #&gt; LC_PAPER=en_US.UTF-8 LC_NAME=C #&gt; LC_ADDRESS=C LC_TELEPHONE=C #&gt; LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C #&gt; #&gt; Package version: #&gt; base64enc_0.1.3 bookdown_0.15 digest_0.6.22 evaluate_0.14 #&gt; glue_1.3.1 graphics_4.0.0 grDevices_4.0.0 highr_0.8 #&gt; htmltools_0.4.0 jsonlite_1.6 knitr_1.26 magrittr_1.5 #&gt; markdown_1.1 methods_4.0.0 mime_0.7 Rcpp_1.0.3 #&gt; rlang_0.4.1 rmarkdown_1.17 stats_4.0.0 stringi_1.4.3 #&gt; stringr_1.4.0 tinytex_0.17 tools_4.0.0 utils_4.0.0 #&gt; xfun_0.11 yaml_2.2.0 #&gt; #&gt; Pandoc version: 2.7.3 本书要求 R 软件版本 4.0.0 因为书中涉及 barplot 新增的公式方法，新增多维数组操作函数 asplit， axis 函数的 gap.axis ，新增 hcl.colors 函数等，完整列表见官网 What’s New? 书籍同时使用 bookdown.org 和 netlify 部署，网址分别是 https://bookdown.org/xiangyun/RGraphics/ 和 https://r-graphics.netlify.com/ 参考文献 "],
["preface.html", "前言 关于本书 本书结构 关于作者", " 前言 关于本书 这里写每章的主要内容介绍 本书结构 关于作者 热心开源事业，统计之都副主编，经常混迹于统计之都论坛、Github 和爆栈网。个人主页 https://www.xiangyunhuang.com.cn/ "],
["setup.html", "第 1 章 安装与配置 1.1 仓库安装 1.2 源码安装 1.3 忍者安装 1.4 配置 1.5 命令行参数", " 第 1 章 安装与配置 主要参考 R-admin 1.1 仓库安装 1.1.1 Ubuntu 安装 openssh zsh 和 Git sudo apt-get install zsh openssh-server sudo add-apt-repository -y ppa:git-core/ppa sudo apt update &amp;&amp; sudo apt install git sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot; 只考虑最新的 Ubuntu 18.04 因为本书写成的时候，该版本应该已经大规模使用了，默认版本的安装和之前版本的安装就不再展示了。安装最新版 R-3.5.x，无论安装哪个版本，都要先导入密钥 sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv E084DAB9 Ubuntu 14.04.5 提供的默认版本 R 3.0.2，安装 R 3.5.x 系列之前的版本，如 R 3.4.4 sudo apt-add-repository -y &quot;deb http://cran.rstudio.com/bin/linux/ubuntu `lsb_release -cs`/&quot; sudo apt-get install r-base-dev 添加完仓库后，都需要更新源sudo apt-get update，安装 R 3.5.x 系列最新版 sudo apt-add-repository -y &quot;deb https://mirrors.tuna.tsinghua.edu.cn/CRAN/bin/linux/ubuntu trusty-cran35/&quot; Ubuntu 16.04.5 提供的默认版本 R 3.4.4，这是 R 3.4.x 系列的最新版，安装目前最新的 R 3.5.x 版本需要 sudo apt-add-repository -y &quot;deb https://mirrors.tuna.tsinghua.edu.cn/CRAN/bin/linux/ubuntu xenial-cran35/&quot; Ubuntu 18.04.1 提供的默认版本 R 3.4.4，安装目前的最新版本需要 sudo apt-add-repository -y &quot;deb https://mirrors.tuna.tsinghua.edu.cn/CRAN/bin/linux/ubuntu bionic-cran35/&quot; 接下来安装 R，详细安装指导见 CRAN 官网。 sudo apt-get install -y r-base-dev Michael Rutter 维护了编译好的二进制版本 https://launchpad.net/~marutter，比如 rstan 包可以通过安装 r-cran-rstan 完成 # R packages for Ubuntu LTS. Based on CRAN Task Views. sudo add-apt-repository -y ppa:marutter/c2d4u3.5 sudo apt-get install r-cran-rstan 1.1.2 CentOS 同样适用于 Fedora 安装指导10 1.2 源码安装 1.2.1 Ubuntu 首先启用源码仓库，否则执行 sudo apt-get build-dep r-base 会报如下错误 E: You must put some &#39;source&#39; URIs in your sources.list sudo sed -i -- &#39;s/#deb-src/deb-src/g&#39; /etc/apt/sources.list &amp;&amp; sudo sed -i -- &#39;s/# deb-src/deb-src/g&#39; /etc/apt/sources.list sudo apt-get update 安装编译 R 所需的系统依赖 sudo apt-get build-dep r-base-dev 编译安装 R ./configure make &amp;&amp; make install 自定义编译选项 ./configure --help 1.2.2 CentOS 基于 CentOS 7 和 GCC 4.8.5，参考 R-admin 手册 下载源码包 最新发布的稳定版 curl -fLo ./R-latest.tar.gz https://mirrors.tuna.tsinghua.edu.cn/CRAN/src/base/R-latest.tar.gz % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 10 28.7M 10 3232k 0 0 107k 0 0:04:34 0:00:30 0:04:04 118k 安装依赖 sudo yum install -y yum-utils epel-release &amp;&amp; sudo yum-builddep R-devel sudo dnf update &amp;&amp; sudo dnf builddep R-devel # Fedora 30 解压配置 mkdir R-latest &amp;&amp; tar -xzf ./R-latest.tar.gz -C ./R-latest &amp;&amp; cd R-3.5.2 ./configure --enable-R-shlib --enable-byte-compiled-packages \\ --enable-BLAS-shlib --enable-memory-profiling R is now configured for x86_64-pc-linux-gnu Source directory: . Installation directory: /usr/local C compiler: gcc -std=gnu99 -g -O2 Fortran 77 compiler: gfortran -g -O2 Default C++ compiler: g++ -g -O2 C++98 compiler: g++ -std=gnu++98 -g -O2 C++11 compiler: g++ -std=gnu++11 -g -O2 C++14 compiler: C++17 compiler: Fortran 90/95 compiler: gfortran -g -O2 Obj-C compiler: gcc -g -O2 -fobjc-exceptions Interfaces supported: X11, tcltk External libraries: readline, curl Additional capabilities: PNG, JPEG, TIFF, NLS, cairo, ICU Options enabled: shared R library, shared BLAS, R profiling, memory profiling Capabilities skipped: Options not enabled: Recommended packages: yes 编译安装 make -j 2 all sudo make install BLAS 加持（可选） BLAS 对于加快矩阵计算至关重要，编译 R 带 BLAS 支持，添加 OpenBLAS 支持 --with-blas=\"-lopenblas\" 或 ATLAS 支持 --with-blas=\"-L/usr/lib64/atlas -lsatlas\" sudo yum install -y openblas openblas-threads openblas-openmp ./configure --enable-R-shlib --enable-byte-compiled-packages \\ --enable-BLAS-shlib --enable-memory-profiling \\ --with-blas=&quot;-lopenblas&quot; R is now configured for x86_64-pc-linux-gnu Source directory: . Installation directory: /usr/local C compiler: gcc -std=gnu99 -g -O2 Fortran 77 compiler: gfortran -g -O2 Default C++ compiler: g++ -g -O2 C++98 compiler: g++ -std=gnu++98 -g -O2 C++11 compiler: g++ -std=gnu++11 -g -O2 C++14 compiler: C++17 compiler: Fortran 90/95 compiler: gfortran -g -O2 Obj-C compiler: gcc -g -O2 -fobjc-exceptions Interfaces supported: X11, tcltk External libraries: readline, **BLAS(OpenBLAS)**, curl Additional capabilities: PNG, JPEG, TIFF, NLS, cairo, ICU Options enabled: shared R library, shared BLAS, R profiling, memory profiling Capabilities skipped: Options not enabled: Recommended packages: yes 配置成功的标志，如 OpenBLAS checking for dgemm_ in -lopenblas... yes checking whether double complex BLAS can be used... yes checking whether the BLAS is complete... yes ATLAS 加持 sudo yum install -y atlas ./configure --enable-R-shlib --enable-byte-compiled-packages \\ --enable-BLAS-shlib --enable-memory-profiling \\ --with-blas=&quot;-L/usr/lib64/atlas -lsatlas&quot; R is now configured for x86_64-pc-linux-gnu Source directory: . Installation directory: /usr/local C compiler: gcc -std=gnu99 -g -O2 Fortran 77 compiler: gfortran -g -O2 Default C++ compiler: g++ -g -O2 C++98 compiler: g++ -std=gnu++98 -g -O2 C++11 compiler: g++ -std=gnu++11 -g -O2 C++14 compiler: C++17 compiler: Fortran 90/95 compiler: gfortran -g -O2 Obj-C compiler: gcc -g -O2 -fobjc-exceptions Interfaces supported: X11, tcltk External libraries: readline, **BLAS(generic)**, curl Additional capabilities: PNG, JPEG, TIFF, NLS, cairo, ICU Options enabled: shared R library, shared BLAS, R profiling, memory profiling Capabilities skipped: Options not enabled: Recommended packages: yes ATLAS 配置成功 checking for dgemm_ in -L/usr/lib64/atlas -lsatlas... yes checking whether double complex BLAS can be used... yes checking whether the BLAS is complete... yes 后续步骤同上 1.3 忍者安装 从源码自定义安装：加速 Intel MKL 和 大文件支持 https://software.intel.com/en-us/articles/using-intel-mkl-with-r 1.4 配置 1.4.1 初始会话 .Rprofile .Rprofile 文件位于 ~/ 目录下或者 R 项目的根目录下 查看帮助 ?.Rprofile 更多配置设置 startup 1.4.2 环境变量 .Renviron .Renviron 文件位于 ~/ 目录下 1.4.3 编译选项 Makevars Makevars 文件位于 ~/.R/ 目录下 1.5 命令行参数 commandArgs 从终端命令行中传递参数 rdoc 高亮 R 帮助文档中的 R 函数、关键字 NULL。启用需要在R控制台中执行 rdoc::use_rdoc() radian 代码自动补全和语法高亮，进入 R 控制台，终端中输入radian docopt 提供R命令行工具，如 littler 包，getopt 从终端命令行接受参数 optparse 命令行选项参数的解析器 安装完 R-littler R-littler-examples (centos) 或 littler r-cran-littler (ubuntu) 后，执行 # centos sudo ln -s /usr/lib64/R/library/littler/examples/install.r /usr/bin/install.r sudo ln -s /usr/lib64/R/library/littler/examples/install2.r /usr/bin/install2.r sudo ln -s /usr/lib64/R/library/littler/examples/installGithub.r /usr/bin/installGithub.r sudo ln -s /usr/lib64/R/library/littler/examples/testInstalled.r /usr/bin/testInstalled.r # ubuntu sudo ln -s /usr/lib/R/site-library/littler/examples/install.r /usr/bin/install.r sudo ln -s /usr/lib/R/site-library/littler/examples/install2.r /usr/bin/install2.r sudo ln -s /usr/lib/R/site-library/littler/examples/installGithub.r /usr/bin/installGithub.r sudo ln -s /usr/lib/R/site-library/littler/examples/testInstalled.r /usr/bin/testInstalled.r 这样可以载终端中安装 R 包了 install.r docopt #!/usr/bin/env Rscript # 安装 optparse 提供更加灵活的传参方式 # 也可参考 littler https://github.com/eddelbuettel/littler # if(&quot;optparse&quot; %in% .packages(TRUE)) install.packages(&#39;optparse&#39;,repos = &quot;https://cran.rstudio.com&quot;) # https://cran.r-project.org/doc/manuals/R-intro.html#Invoking-R-from-the-command-line # http://www.cureffi.org/2014/01/15/running-r-batch-mode-linux/ args = commandArgs(trailingOnly=TRUE) # 函数功能：在浏览器中同时打开多个 PDF 文档 open_pdf &lt;- function(pdf_path = &quot;./figures/&quot;, n = 1) { # pdf_path: PDF文件所在目录 # n: 默认打开1个PDF文档 # PDF文档目录 pdfs &lt;- list.files(pdf_path, pattern = &#39;\\\\.pdf$&#39;) # PDF 文档路径 path_to_pdfs &lt;- paste(pdf_path, pdfs, sep = .Platform$file.sep) # 打开 PDF 文档 invisible(lapply(head(path_to_pdfs, n), browseURL)) } open_pdf(pdf_path, n = args[1]) # 使用： Rscript --vanilla code/batch-open-pdf.R 20 在 CentOS 7 上打造 R 语言编程环境↩︎ "],
["files.html", "第 2 章 文件管理员 2.1 查看文件 2.2 操作文件 2.3 压缩文件 2.4 路径操作 2.5 查找文件 2.6 文件权限 2.7 区域设置 2.8 进程管理 2.9 系统命令 2.10 时间管理 2.11 R 包管理 2.12 查找函数 2.13 运行环境", " 第 2 章 文件管理员 考虑添加 Shell 下的命令实现，参考 命令行的艺术 library(magrittr) # 提供管道命令 %&gt;% fs 由 Jim Hester 开发，提供文件系统操作的统一接口，相比于 R 默认的文件系统的操作函数有显而易见的优点，详情请看 https://fs.r-lib.org/ 对于文件操作，Jim Hester 开发了 fs 包 目的是统一文件操作的命令，由于时间和历史原因，R内置的文件操作函数的命名很不统一，如 path.expand() 和 normalizePath()，Sys.chmod() 和 file.access() 等 # 加载 R 包 library(fs) 2.1 查看文件 文件夹只包含文件，目录既包含文件又包含文件夹，list.dirs 列出目录或文件夹，list.files 列出文件或文件夹 list.dirs(path = \".\", full.names = TRUE, recursive = TRUE) path: 指定完整路径名，默认使用当前路径 getwd() full.names: TRUE 返回相对路径，FALSE 返回目录的名称 recursive: 是否递归的方式列出目录，如果是的话，目录下的子目录也会列出 # list.dirs(path = &#39;.&#39;, full.names = TRUE, recursive = TRUE) list.dirs(path = &#39;.&#39;, full.names = TRUE, recursive = FALSE) #&gt; [1] &quot;./_book&quot; &quot;./_bookdown_files&quot; &quot;./.git&quot; #&gt; [4] &quot;./data&quot; &quot;./figures&quot; &quot;./files_cache&quot; #&gt; [7] &quot;./includes&quot; &quot;./index_cache&quot; &quot;./interactives&quot; #&gt; [10] &quot;./preface_cache&quot; &quot;./ubuntu&quot; list.dirs(path = &#39;.&#39;, full.names = FALSE, recursive = FALSE) #&gt; [1] &quot;_book&quot; &quot;_bookdown_files&quot; &quot;.git&quot; &quot;data&quot; #&gt; [5] &quot;figures&quot; &quot;files_cache&quot; &quot;includes&quot; &quot;index_cache&quot; #&gt; [9] &quot;interactives&quot; &quot;preface_cache&quot; &quot;ubuntu&quot; list.files(path = \".\", pattern = NULL, all.files = FALSE, full.names = FALSE, recursive = FALSE,ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE) 是否递归的方式列出目录，如果是的话，目录下的子目录也会列出 path: 指定完整路径名，默认使用当前路径 getwd() full.names: TRUE 返回相对路径，FALSE 返回目录的名称 recursive: 是否递归的方式列出目录，如果是的话，目录下的子目录也会列出 file.show(..., header = rep(\"\", nfiles), title = \"R Information\", delete.file = FALSE, pager = getOption(\"pager\"),encoding = \"\") 打开文件内容，file.show 会在R终端中新开一个窗口显示文件 rinternals &lt;- file.path(R.home(&quot;include&quot;), &quot;Rinternals.h&quot;) # file.show(rinternals) file.info(..., extra_cols = TRUE) 获取文件信息，此外 file.mode(...) 、 file.mtime(...) 和 file.size(...) 分别表示文件的读写权限，修改时间和文件大小。 file.info(rinternals) #&gt; size isdir mode #&gt; /home/travis/R-bin/lib/R/include/Rinternals.h 62278 FALSE 644 #&gt; mtime #&gt; /home/travis/R-bin/lib/R/include/Rinternals.h 2019-11-17 09:20:21 #&gt; ctime #&gt; /home/travis/R-bin/lib/R/include/Rinternals.h 2019-11-17 10:30:52 #&gt; atime uid gid #&gt; /home/travis/R-bin/lib/R/include/Rinternals.h 2019-11-17 10:34:45 2000 2000 #&gt; uname grname #&gt; /home/travis/R-bin/lib/R/include/Rinternals.h travis travis file.mode(rinternals) #&gt; [1] &quot;644&quot; file.mtime(rinternals) #&gt; [1] &quot;2019-11-17 09:20:21 UTC&quot; file.size(rinternals) #&gt; [1] 62278 # 查看当前目录的权限 file.info(&quot;.&quot;) #&gt; size isdir mode mtime ctime atime #&gt; . 4096 TRUE 775 2019-11-17 11:10:45 2019-11-17 11:10:45 2019-11-17 11:10:46 #&gt; uid gid uname grname #&gt; . 2000 2000 travis travis # 查看指定目录权限 file.info(&quot;./_book/&quot;) #&gt; size isdir mode mtime ctime #&gt; ./_book/ 4096 TRUE 775 2019-11-17 11:10:42 2019-11-17 11:10:42 #&gt; atime uid gid uname grname #&gt; ./_book/ 2019-11-17 11:10:42 2000 2000 travis travis file.access(names, mode = 0) 文件是否可以被访问，第二个参数 mode 一共有四种取值 0，1，2，4，分别表示文件的存在性，可执行，可写和可读四种，返回值 0 表示成功，返回值 -1 表示失败。 file.access(rinternals,mode = 0) #&gt; /home/travis/R-bin/lib/R/include/Rinternals.h #&gt; 0 file.access(rinternals,mode = 1) #&gt; /home/travis/R-bin/lib/R/include/Rinternals.h #&gt; -1 file.access(rinternals,mode = 2) #&gt; /home/travis/R-bin/lib/R/include/Rinternals.h #&gt; 0 file.access(rinternals,mode = 4) #&gt; /home/travis/R-bin/lib/R/include/Rinternals.h #&gt; 0 dir(path = \".\", pattern = NULL, all.files = FALSE, full.names = FALSE, recursive = FALSE, ignore.case = FALSE, include.dirs = FALSE, no.. = FALSE) 查看目录，首先看看和目录操作有关的函数列表 apropos(&quot;^dir.&quot;) #&gt; [1] &quot;dir_copy&quot; &quot;dir_create&quot; &quot;dir_delete&quot; &quot;dir_exists&quot; &quot;dir_info&quot; #&gt; [6] &quot;dir_ls&quot; &quot;dir_map&quot; &quot;dir_tree&quot; &quot;dir_walk&quot; &quot;dir.create&quot; #&gt; [11] &quot;dir.exists&quot; &quot;dirname&quot; 显而易见，dir.create 和 dir.exists 分别是创建目录和查看目录的存在性。dirname 和 basename 是一对函数用来操作文件路径。以当前目录/home/travis/build/XiangyunHuang/RGraphics为例，dirname(getwd()) 返回 /home/travis/build/XiangyunHuang 而 basename(getwd()) 返回 RGraphics。对于文件路径而言，dirname(rinternals) 返回文件所在的目录/home/travis/R-bin/lib/R/include， basename(rinternals) 返回文件名Rinternals.h。dir 函数查看指定路径或目录下的文件，支持以模式匹配和递归的方式查找目录下的文件 # 当前目录下的子目录和文件 dir() #&gt; [1] &quot;_book&quot; &quot;_bookdown_files&quot; #&gt; [3] &quot;_bookdown.yml&quot; &quot;_build.sh&quot; #&gt; [5] &quot;_common.R&quot; &quot;_deploy.sh&quot; #&gt; [7] &quot;_main.rds&quot; &quot;_output.yml&quot; #&gt; [9] &quot;_render.R&quot; &quot;99-references.Rmd&quot; #&gt; [11] &quot;Adobe-Fonts.zip&quot; &quot;animated-graphics.Rmd&quot; .... # 查看指定目录的子目录和文件 dir(path = &quot;./&quot;) #&gt; [1] &quot;_book&quot; &quot;_bookdown_files&quot; #&gt; [3] &quot;_bookdown.yml&quot; &quot;_build.sh&quot; #&gt; [5] &quot;_common.R&quot; &quot;_deploy.sh&quot; #&gt; [7] &quot;_main.rds&quot; &quot;_output.yml&quot; #&gt; [9] &quot;_render.R&quot; &quot;99-references.Rmd&quot; #&gt; [11] &quot;Adobe-Fonts.zip&quot; &quot;animated-graphics.Rmd&quot; .... # 只列出以字母R开头的子目录和文件 dir(path = &quot;./&quot;, pattern = &quot;^R&quot;) #&gt; [1] &quot;README.md&quot; &quot;RGraphics.Rproj&quot; # 列出目录下所有目录和文件，包括隐藏文件 dir(path = &quot;./&quot;, all.files = TRUE) #&gt; [1] &quot;_book&quot; &quot;_bookdown_files&quot; #&gt; [3] &quot;_bookdown.yml&quot; &quot;_build.sh&quot; #&gt; [5] &quot;_common.R&quot; &quot;_deploy.sh&quot; #&gt; [7] &quot;_main.rds&quot; &quot;_output.yml&quot; #&gt; [9] &quot;_render.R&quot; &quot;.&quot; #&gt; [11] &quot;..&quot; &quot;.git&quot; .... # 支持正则表达式 dir(pattern = &#39;^[A-Z]+[.]txt$&#39;, full.names=TRUE, system.file(&#39;doc&#39;, &#39;SuiteSparse&#39;, package=&#39;Matrix&#39;)) #&gt; [1] &quot;/home/travis/R-bin/lib/R/library/Matrix/doc/SuiteSparse/AMD.txt&quot; #&gt; [2] &quot;/home/travis/R-bin/lib/R/library/Matrix/doc/SuiteSparse/CHOLMOD.txt&quot; #&gt; [3] &quot;/home/travis/R-bin/lib/R/library/Matrix/doc/SuiteSparse/COLAMD.txt&quot; #&gt; [4] &quot;/home/travis/R-bin/lib/R/library/Matrix/doc/SuiteSparse/SPQR.txt&quot; # 在临时目录下递归创建一个目录 dir.create(paste0(tempdir(), &quot;/_book/tmp&quot;), recursive = TRUE) 查看当前目录下的文件和文件夹 tree -L 2 . 或者 ls -l . 2.2 操作文件 实现文件增删改查的函数如下 apropos(&quot;^file.&quot;) #&gt; [1] &quot;file_access&quot; &quot;file_chmod&quot; &quot;file_chown&quot; &quot;file_copy&quot; #&gt; [5] &quot;file_create&quot; &quot;file_delete&quot; &quot;file_exists&quot; &quot;file_info&quot; #&gt; [9] &quot;file_move&quot; &quot;file_show&quot; &quot;file_size&quot; &quot;file_temp&quot; #&gt; [13] &quot;file_temp_pop&quot; &quot;file_temp_push&quot; &quot;file_test&quot; &quot;file_touch&quot; #&gt; [17] &quot;file.access&quot; &quot;file.append&quot; &quot;file.choose&quot; &quot;file.copy&quot; #&gt; [21] &quot;file.create&quot; &quot;file.edit&quot; &quot;file.exists&quot; &quot;file.info&quot; #&gt; [25] &quot;file.link&quot; &quot;file.mode&quot; &quot;file.mtime&quot; &quot;file.path&quot; #&gt; [29] &quot;file.remove&quot; &quot;file.rename&quot; &quot;file.show&quot; &quot;file.size&quot; #&gt; [33] &quot;file.symlink&quot; &quot;fileSnapshot&quot; file.create(..., showWarnings = TRUE) 创建/删除文件，检查文件的存在性 file.create(&#39;demo.txt&#39;) #&gt; [1] TRUE file.exists(&#39;demo.txt&#39;) #&gt; [1] TRUE file.remove(&#39;demo.txt&#39;) #&gt; [1] TRUE file.exists(&#39;demo.txt&#39;) #&gt; [1] FALSE file.rename(from, to) 文件重命名 file.create(&#39;demo.txt&#39;) #&gt; [1] TRUE file.rename(from = &#39;demo.txt&#39;, to = &#39;tmp.txt&#39;) #&gt; [1] TRUE file.exists(&#39;tmp.txt&#39;) #&gt; [1] TRUE file.append(file1, file2) 追加文件 file2 的内容到文件 file1 上 if(!dir.exists(paths = &#39;data/&#39;)) dir.create(path = &#39;data/&#39;) # 创建两个临时文件 # file.create(c(&#39;data/tmp1.md&#39;,&#39;data/tmp2.md&#39;)) # 写入内容 cat(&quot;AAA\\n&quot;, file = &#39;data/tmp1.md&#39;) cat(&quot;BBB\\n&quot;, file = &#39;data/tmp2.md&#39;) # 追加文件 file.append(file1 = &#39;data/tmp1.md&#39;, file2 = &#39;data/tmp2.md&#39;) #&gt; [1] TRUE # 展示文件内容 readLines(&#39;data/tmp1.md&#39;) #&gt; [1] &quot;AAA&quot; &quot;BBB&quot; file.copy(from, to, overwrite = recursive, recursive = FALSE,copy.mode = TRUE, copy.date = FALSE) 复制文件，参考 https://blog.csdn.net/wzj_110/article/details/86497860 file.copy(from = &#39;Makefile&#39;, to = &#39;data/Makefile&#39;) #&gt; [1] TRUE file.symlink(from, to) 创建符号链接 file.link(from, to) 创建硬链接 Sys.junction(from, to) windows 平台上的函数，提供类似符号链接的功能 Sys.readlink(paths) 读取文件的符号链接（软链接） choose.files 在 Windows 环境下交互式地选择一个或多个文件，所以该函数只运行于 Windows 环境 # 选择 zip 格式的压缩文件或其它 if (interactive()) choose.files(filters = Filters[c(&quot;zip&quot;, &quot;All&quot;),]) Filters 参数传递一个矩阵，用来描述或标记R识别的文件类型，上面这个例子就能筛选出 zip 格式的文件 download.file 文件下载 download.file(url = &#39;https://mirrors.tuna.tsinghua.edu.cn/CRAN/src/base/R-latest.tar.gz&#39;, destfile = &#39;data/R-latest.tar.gz&#39;, method = &#39;auto&#39;) 2.3 压缩文件 tar 和 zip 是两种常见的压缩文件工具，具有免费和跨平台的特点，因此应用范围广11。 R 内对应的压缩与解压缩命令是 tar/untar tar(tarfile, files = NULL, compression = c(&quot;none&quot;, &quot;gzip&quot;, &quot;bzip2&quot;, &quot;xz&quot;), compression_level = 6, tar = Sys.getenv(&quot;tar&quot;), extra_flags = &quot;&quot;) 比较常用的压缩文件格式是 .tar.gz 和 .tar.bz2，将目录 _book/及其文件分别压缩成 _book.tar.gz 和 _book.tar.bz2 压缩包的名字可以任意取，后者压缩比率高。.tar.xz 的压缩比率最高，需要确保系统中安装了 gzip，bzip2 和 xz-utils 软件，R 软件自带的 tar 软件来自 Rtools12，我们可以通过设置系统环境变量 Sys.setenv(tar=\"path/to/tar\") 指定外部 tar。tar 实际支持的压缩类型只有 .tar.gz13。zip/unzip 压缩与解压缩就不赘述了。 # 打包目录 _book tar(tarfile = &#39;data/_book.tar&#39;, files = &#39;_book&#39;, compression = &#39;none&#39;) # 文件压缩成 _book.xz 格式 tar(tarfile = &#39;data/_book.tar.xz&#39;, files = &#39;data/_book&#39;, compression = &#39;xz&#39;) # tar -cf data/_book.tar _book 然后 xz -z data/_book.tar.xz data/_book.tar # 或者一次压缩到位 tar -Jcf data/_book.tar.xz _book/ # 解压 xz -d data/_book.tar.xz 再次解压 tar -xf data/_book.tar # 或者一次解压 tar -Jxf data/_book.tar.xz # 文件压缩成 _book.tar.gz 格式 # tar -czf data/_book.tar.gz _book tar(tarfile = &#39;data/_book.tar.gz&#39;, files = &#39;_book&#39;, compression = &#39;gzip&#39;) # 解压 tar -xzf data/_book.tar.gz # 文件压缩成 .tar.bz2 格式 # tar -cjf data/book2.tar.bz2 _book tar(tarfile = &#39;data/_book.tar.bz2&#39;, files = &#39;_book&#39;, compression = &#39;bzip2&#39;) # 解压 tar -xjf data/book2.tar.bz2 untar(tarfile, files = NULL, list = FALSE, exdir = &quot;.&quot;, compressed = NA, extras = NULL, verbose = FALSE, restore_times = TRUE, tar = Sys.getenv(&quot;TAR&quot;)) 2.4 路径操作 环境变量算是路径操作 # 获取环境变量 Sys.getenv(&quot;PATH&quot;) #&gt; [1] &quot;/home/travis/.TinyTeX/bin/x86_64-linux:/home/travis/.rvm/gems/ruby-2.5.3/bin:/home/travis/.rvm/gems/ruby-2.5.3@global/bin:/home/travis/.rvm/rubies/ruby-2.5.3/bin:/home/travis/.rvm/bin:/usr/lib/postgresql/9.6/bin:/home/travis/R-bin/bin:/home/travis/bin:/home/travis/.local/bin:/usr/local/lib/jvm/openjdk11/bin:/opt/pyenv/shims:/home/travis/.phpenv/shims:/home/travis/perl5/perlbrew/bin:/home/travis/.nvm/versions/node/v8.12.0/bin:/home/travis/.kiex/elixirs/elixir-1.7.4/bin:/home/travis/.kiex/bin:/home/travis/gopath/bin:/home/travis/.gimme/versions/go1.11.1.linux.amd64/bin:/usr/local/cmake-3.12.4/bin:/usr/local/clang-7.0.0/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/opt/ghc/bin:/home/travis/.phpenv/bin:/opt/pyenv/bin:/home/travis/.yarn/bin&quot; # 设置环境变量 Windows # Sys.setenv(R_GSCMD = &quot;C:/Program Files/gs/gs9.26/bin/gswin64c.exe&quot;) # 设置 pandoc 环境变量 pandoc_path &lt;- Sys.getenv(&quot;RSTUDIO_PANDOC&quot;, NA) if (Sys.which(&quot;pandoc&quot;) == &quot;&quot; &amp;&amp; !is.na(pandoc_path)) { Sys.setenv(PATH = paste( Sys.getenv(&quot;PATH&quot;), pandoc_path, sep = if (.Platform$OS.type == &quot;unix&quot;) &quot;:&quot; else &quot;;&quot; )) } 操作文件路径 file.path Construct Path to File file.path(&#39;./_book&#39;) #&gt; [1] &quot;./_book&quot; path.expand(path) Expand File Paths path.expand(&#39;./_book&#39;) #&gt; [1] &quot;./_book&quot; path.expand(&#39;~&#39;) #&gt; [1] &quot;/home/travis&quot; normalizePath() Express File Paths in Canonical Form normalizePath(&#39;~&#39;) #&gt; [1] &quot;/home/travis&quot; normalizePath(&#39;./_book&#39;) #&gt; [1] &quot;/home/travis/build/XiangyunHuang/RGraphics/_book&quot; shortPathName(path) 只在 Windows 下可用，Express File Paths in Short Form cat(shortPathName(c(R.home(), tempdir())), sep = &quot;\\n&quot;) Sys.glob Wildcard Expansion on File Paths Sys.glob(file.path(R.home(), &quot;library&quot;, &quot;*&quot;, &quot;R&quot;, &quot;*.rdx&quot;)) #&gt; [1] &quot;/home/travis/R-bin/lib/R/library/base/R/base.rdx&quot; #&gt; [2] &quot;/home/travis/R-bin/lib/R/library/boot/R/boot.rdx&quot; #&gt; [3] &quot;/home/travis/R-bin/lib/R/library/class/R/class.rdx&quot; #&gt; [4] &quot;/home/travis/R-bin/lib/R/library/cluster/R/cluster.rdx&quot; #&gt; [5] &quot;/home/travis/R-bin/lib/R/library/codetools/R/codetools.rdx&quot; #&gt; [6] &quot;/home/travis/R-bin/lib/R/library/compiler/R/compiler.rdx&quot; .... 2.5 查找文件 here 包用来查找你的文件，查找文件、可执行文件的完整路径、R 包 Sys.which Find Full Paths to Executables Sys.which(&#39;pandoc&#39;) #&gt; pandoc #&gt; &quot;/usr/bin/pandoc&quot; system.file Find Names of R System Files system.file(&#39;CITATION&#39;,package = &#39;base&#39;) #&gt; [1] &quot;/home/travis/R-bin/lib/R/library/base/CITATION&quot; R.home # R 安装目录 R.home() #&gt; [1] &quot;/home/travis/R-bin/lib/R&quot; # R执行文件目录 R.home(&#39;bin&#39;) #&gt; [1] &quot;/home/travis/R-bin/lib/R/bin&quot; # 配置文件目录 R.home(&#39;etc&#39;) #&gt; [1] &quot;/home/travis/R-bin/lib/R/etc&quot; # R 基础扩展包存放目录 R.home(&#39;library&#39;) #&gt; [1] &quot;/home/travis/R-bin/lib/R/library&quot; .libPaths() R 包存放的路径有哪些 .libPaths() #&gt; [1] &quot;/home/travis/R/Library&quot; &quot;/usr/local/lib/R/site-library&quot; #&gt; [3] &quot;/home/travis/R-bin/lib/R/library&quot; find.package 查找R包所在目录 find.package(package = &#39;MASS&#39;) #&gt; [1] &quot;/home/travis/R-bin/lib/R/library/MASS&quot; file.exist 检查文件是否存在 file.exists(paste(R.home(&#39;etc&#39;),&quot;Rprofile.site&quot;,sep = .Platform$file.sep)) #&gt; [1] FALSE apropos 和 find 查找对象 apropos(what, where = FALSE, ignore.case = TRUE, mode = &quot;any&quot;) find(what, mode = &quot;any&quot;, numeric = FALSE, simple.words = TRUE) 匹配含有 find 的函数 apropos(&quot;find&quot;) #&gt; [1] &quot;.find.package&quot; &quot;find&quot; &quot;Find&quot; #&gt; [4] &quot;find.package&quot; &quot;findClass&quot; &quot;findFunction&quot; #&gt; [7] &quot;findInterval&quot; &quot;findLineNum&quot; &quot;findMethod&quot; #&gt; [10] &quot;findMethods&quot; &quot;findMethodSignatures&quot; &quot;findPackageEnv&quot; #&gt; [13] &quot;findRestart&quot; &quot;findUnique&quot; 问号 ? 加函数名搜索R软件内置函数的帮助文档，如 ?regrex。如果不知道具体的函数名，可采用关键词搜索，如 help.search(keyword = &quot;character&quot;, package = &quot;base&quot;) browseEnv 函数用来在浏览器中查看当前环境下，对象的列表，默认环境是 sys.frame() 2.6 文件权限 操作目录和文件的权限 Manipulation of Directories and File Permissions dir.exists(paths) 检查目录是否存在 dir.exists(c(&#39;./_book&#39;,&#39;./book&#39;)) #&gt; [1] TRUE FALSE dir.create(path, showWarnings = TRUE, recursive = FALSE, mode = \"0777\") 创建目录 dir.create(&#39;./_book/tmp&#39;) Sys.chmod(paths, mode = \"0777\", use_umask = TRUE) 修改权限 Sys.chmod(&#39;./_book/tmp&#39;) Sys.umask(mode = NA) 2.7 区域设置 Sys.getlocale(category = \"LC_ALL\") 查看当前区域设置 Sys.getlocale(category = &quot;LC_ALL&quot;) #&gt; [1] &quot;LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=en_US.UTF-8;LC_MESSAGES=en_US.UTF-8;LC_PAPER=en_US.UTF-8;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=en_US.UTF-8;LC_IDENTIFICATION=C&quot; Sys.setlocale(category = \"LC_ALL\", locale = \"\") 设置区域 # 默认设置 Sys.setlocale(category = &quot;LC_ALL&quot;, locale = &quot;&quot;) #&gt; [1] &quot;LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=en_US.UTF-8;LC_MESSAGES=en_US.UTF-8;LC_PAPER=en_US.UTF-8;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=en_US.UTF-8;LC_IDENTIFICATION=C&quot; # 保存当前区域设置 old &lt;- Sys.getlocale() Sys.setlocale(&quot;LC_MONETARY&quot;, locale = &quot;&quot;) #&gt; [1] &quot;en_US.UTF-8&quot; Sys.localeconv() #&gt; decimal_point thousands_sep grouping int_curr_symbol #&gt; &quot;.&quot; &quot;&quot; &quot;&quot; &quot;USD &quot; #&gt; currency_symbol mon_decimal_point mon_thousands_sep mon_grouping #&gt; &quot;$&quot; &quot;.&quot; &quot;,&quot; &quot;\\003\\003&quot; #&gt; positive_sign negative_sign int_frac_digits frac_digits #&gt; &quot;&quot; &quot;-&quot; &quot;2&quot; &quot;2&quot; #&gt; p_cs_precedes p_sep_by_space n_cs_precedes n_sep_by_space #&gt; &quot;1&quot; &quot;0&quot; &quot;1&quot; &quot;0&quot; #&gt; p_sign_posn n_sign_posn #&gt; &quot;1&quot; &quot;1&quot; Sys.setlocale(&quot;LC_MONETARY&quot;, &quot;de_AT&quot;) #&gt; Warning in Sys.setlocale(&quot;LC_MONETARY&quot;, &quot;de_AT&quot;): OS reports request to set #&gt; locale to &quot;de_AT&quot; cannot be honored #&gt; [1] &quot;&quot; Sys.localeconv() #&gt; decimal_point thousands_sep grouping int_curr_symbol #&gt; &quot;.&quot; &quot;&quot; &quot;&quot; &quot;USD &quot; #&gt; currency_symbol mon_decimal_point mon_thousands_sep mon_grouping #&gt; &quot;$&quot; &quot;.&quot; &quot;,&quot; &quot;\\003\\003&quot; #&gt; positive_sign negative_sign int_frac_digits frac_digits #&gt; &quot;&quot; &quot;-&quot; &quot;2&quot; &quot;2&quot; #&gt; p_cs_precedes p_sep_by_space n_cs_precedes n_sep_by_space #&gt; &quot;1&quot; &quot;0&quot; &quot;1&quot; &quot;0&quot; #&gt; p_sign_posn n_sign_posn #&gt; &quot;1&quot; &quot;1&quot; # 恢复区域设置 Sys.setlocale(locale = old) #&gt; Warning in Sys.setlocale(locale = old): OS reports request to set locale to #&gt; &quot;LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=en_US.UTF-8;LC_COLLATE=en_US.UTF-8;LC_MONETARY=en_US.UTF-8;LC_MESSAGES=en_US.UTF-8;LC_PAPER=en_US.UTF-8;LC_NAME=C;LC_ADDRESS=C;LC_TELEPHONE=C;LC_MEASUREMENT=en_US.UTF-8;LC_IDENTIFICATION=C&quot; #&gt; cannot be honored #&gt; [1] &quot;&quot; Sys.localeconv() 当前区域设置下，数字和货币的表示 Sys.localeconv() #&gt; decimal_point thousands_sep grouping int_curr_symbol #&gt; &quot;.&quot; &quot;&quot; &quot;&quot; &quot;USD &quot; #&gt; currency_symbol mon_decimal_point mon_thousands_sep mon_grouping #&gt; &quot;$&quot; &quot;.&quot; &quot;,&quot; &quot;\\003\\003&quot; #&gt; positive_sign negative_sign int_frac_digits frac_digits #&gt; &quot;&quot; &quot;-&quot; &quot;2&quot; &quot;2&quot; #&gt; p_cs_precedes p_sep_by_space n_cs_precedes n_sep_by_space #&gt; &quot;1&quot; &quot;0&quot; &quot;1&quot; &quot;0&quot; #&gt; p_sign_posn n_sign_posn #&gt; &quot;1&quot; &quot;1&quot; 本地化信息 l10n_info() #&gt; $MBCS #&gt; [1] TRUE #&gt; #&gt; $`UTF-8` #&gt; [1] TRUE #&gt; #&gt; $`Latin-1` #&gt; [1] FALSE 2.8 进程管理 ps 包用来查询进程信息 Sys.getpid 获取当前运行中的 R 控制台（会话）的进程 ID Sys.getpid() #&gt; [1] 26463 proc.time() R 会话运行时间，常用于计算R程序在当前R控制台的运行时间 t1 &lt;- proc.time() tmp &lt;- rnorm(1e6) proc.time() - t1 #&gt; user system elapsed #&gt; 0.081 0.000 0.080 system.time 计算 R 表达式/程序块运行耗费的CPU时间 system.time({ rnorm(1e6) }, gcFirst = TRUE) #&gt; user system elapsed #&gt; 0.079 0.000 0.079 gc.time 报告垃圾回收耗费的时间 gc.time() #&gt; [1] 0 0 0 0 0 2.9 系统命令 system 和 system2 调用系统命令，推荐使用后者，它更灵活更便携。此外，Jeroen Ooms 开发的 sys 包 可看作 base::system2 的替代品 system &lt;- function(...) cat(base::system(..., intern = TRUE), sep = &#39;\\n&#39;) system2 &lt;- function(...) cat(base::system2(..., stdout = TRUE), sep = &quot;\\n&quot;) system(command = &quot;xelatex --version&quot;) #&gt; XeTeX 3.14159265-2.6-0.999991 (TeX Live 2019) #&gt; kpathsea version 6.3.1 #&gt; Copyright 2019 SIL International, Jonathan Kew and Khaled Hosny. #&gt; There is NO warranty. Redistribution of this software is #&gt; covered by the terms of both the XeTeX copyright and #&gt; the Lesser GNU General Public License. #&gt; For more information about these matters, see the file #&gt; named COPYING and the XeTeX source. #&gt; Primary author of XeTeX: Jonathan Kew. #&gt; Compiled with ICU version 63.1; using 63.1 #&gt; Compiled with zlib version 1.2.11; using 1.2.11 #&gt; Compiled with FreeType2 version 2.9.1; using 2.9.1 #&gt; Compiled with Graphite2 version 1.3.13; using 1.3.13 #&gt; Compiled with HarfBuzz version 2.3.1; using 2.3.1 #&gt; Compiled with libpng version 1.6.36; using 1.6.36 #&gt; Compiled with poppler version 0.68.0 #&gt; Compiled with fontconfig version 2.11.0; using 2.11.94 system2(command = &#39;pdflatex&#39;, args = &#39;--version&#39;) #&gt; pdfTeX 3.14159265-2.6-1.40.20 (TeX Live 2019) #&gt; kpathsea version 6.3.1 #&gt; Copyright 2019 Han The Thanh (pdfTeX) et al. #&gt; There is NO warranty. Redistribution of this software is #&gt; covered by the terms of both the pdfTeX copyright and #&gt; the Lesser GNU General Public License. #&gt; For more information about these matters, see the file #&gt; named COPYING and the pdfTeX source. #&gt; Primary author of pdfTeX: Han The Thanh (pdfTeX) et al. #&gt; Compiled with libpng 1.6.36; using libpng 1.6.36 #&gt; Compiled with zlib 1.2.11; using zlib 1.2.11 #&gt; Compiled with xpdf version 4.01 2.10 时间管理 Sys.timezone 获取时区信息 Sys.timezone(location = TRUE) #&gt; [1] &quot;UTC&quot; Sys.time 系统时间，可以给定时区下，显示当前时间，精确到秒，返回数据类型为 POSIXct # 此时美国洛杉矶时间 format(Sys.time(), tz = &#39;America/Los_Angeles&#39;, usetz = TRUE) #&gt; [1] &quot;2019-11-17 03:10:47 PST&quot; # 此时加拿大东部时间 format(Sys.time(), tz = &#39;Canada/Eastern&#39;, usetz = TRUE) #&gt; [1] &quot;2019-11-17 06:10:47 EST&quot; Sys.Date 显示当前时区下的日期，精确到日，返回数据类型为 date Sys.Date() #&gt; [1] &quot;2019-11-17&quot; date 返回当前系统日期和时间，数据类型是字符串 date() #&gt; [1] &quot;Sun Nov 17 11:10:47 2019&quot; ## 也可以这样表示 format(Sys.time(), &quot;%a %b %d %H:%M:%S %Y&quot;) #&gt; [1] &quot;Sun Nov 17 11:10:47 2019&quot; as.POSIX* 是一个 Date-time 转换函数 as.POSIXlt(Sys.time(), &quot;GMT&quot;) # the current time in GMT #&gt; [1] &quot;2019-11-17 11:10:47 GMT&quot; 时间计算 (z &lt;- Sys.time()) # the current date, as class &quot;POSIXct&quot; #&gt; [1] &quot;2019-11-17 11:10:47 UTC&quot; Sys.time() - 3600 # an hour ago #&gt; [1] &quot;2019-11-17 10:10:47 UTC&quot; .leap.seconds 是内置的日期序列 .leap.seconds #&gt; [1] &quot;1972-07-01 UTC&quot; &quot;1973-01-01 UTC&quot; &quot;1974-01-01 UTC&quot; &quot;1975-01-01 UTC&quot; #&gt; [5] &quot;1976-01-01 UTC&quot; &quot;1977-01-01 UTC&quot; &quot;1978-01-01 UTC&quot; &quot;1979-01-01 UTC&quot; #&gt; [9] &quot;1980-01-01 UTC&quot; &quot;1981-07-01 UTC&quot; &quot;1982-07-01 UTC&quot; &quot;1983-07-01 UTC&quot; #&gt; [13] &quot;1985-07-01 UTC&quot; &quot;1988-01-01 UTC&quot; &quot;1990-01-01 UTC&quot; &quot;1991-01-01 UTC&quot; #&gt; [17] &quot;1992-07-01 UTC&quot; &quot;1993-07-01 UTC&quot; &quot;1994-07-01 UTC&quot; &quot;1996-01-01 UTC&quot; #&gt; [21] &quot;1997-07-01 UTC&quot; &quot;1999-01-01 UTC&quot; &quot;2006-01-01 UTC&quot; &quot;2009-01-01 UTC&quot; #&gt; [25] &quot;2012-07-01 UTC&quot; &quot;2015-07-01 UTC&quot; &quot;2017-01-01 UTC&quot; 计算日期对应的星期weekdays，月 months 和季度 quarters weekdays(.leap.seconds) #&gt; [1] &quot;Saturday&quot; &quot;Monday&quot; &quot;Tuesday&quot; &quot;Wednesday&quot; &quot;Thursday&quot; &quot;Saturday&quot; #&gt; [7] &quot;Sunday&quot; &quot;Monday&quot; &quot;Tuesday&quot; &quot;Wednesday&quot; &quot;Thursday&quot; &quot;Friday&quot; #&gt; [13] &quot;Monday&quot; &quot;Friday&quot; &quot;Monday&quot; &quot;Tuesday&quot; &quot;Wednesday&quot; &quot;Thursday&quot; #&gt; [19] &quot;Friday&quot; &quot;Monday&quot; &quot;Tuesday&quot; &quot;Friday&quot; &quot;Sunday&quot; &quot;Thursday&quot; #&gt; [25] &quot;Sunday&quot; &quot;Wednesday&quot; &quot;Sunday&quot; months(.leap.seconds) #&gt; [1] &quot;July&quot; &quot;January&quot; &quot;January&quot; &quot;January&quot; &quot;January&quot; &quot;January&quot; &quot;January&quot; #&gt; [8] &quot;January&quot; &quot;January&quot; &quot;July&quot; &quot;July&quot; &quot;July&quot; &quot;July&quot; &quot;January&quot; #&gt; [15] &quot;January&quot; &quot;January&quot; &quot;July&quot; &quot;July&quot; &quot;July&quot; &quot;January&quot; &quot;July&quot; #&gt; [22] &quot;January&quot; &quot;January&quot; &quot;January&quot; &quot;July&quot; &quot;July&quot; &quot;January&quot; quarters(.leap.seconds) #&gt; [1] &quot;Q3&quot; &quot;Q1&quot; &quot;Q1&quot; &quot;Q1&quot; &quot;Q1&quot; &quot;Q1&quot; &quot;Q1&quot; &quot;Q1&quot; &quot;Q1&quot; &quot;Q3&quot; &quot;Q3&quot; &quot;Q3&quot; &quot;Q3&quot; &quot;Q1&quot; &quot;Q1&quot; #&gt; [16] &quot;Q1&quot; &quot;Q3&quot; &quot;Q3&quot; &quot;Q3&quot; &quot;Q1&quot; &quot;Q3&quot; &quot;Q1&quot; &quot;Q1&quot; &quot;Q1&quot; &quot;Q3&quot; &quot;Q3&quot; &quot;Q1&quot; Sys.setFileTime() 使用系统调用 system call 设置文件或目录的时间 # 修改时间前 file.info(&#39;./_common.R&#39;) #&gt; size isdir mode mtime ctime #&gt; ./_common.R 2035 FALSE 664 2019-11-17 10:33:33 2019-11-17 10:33:33 #&gt; atime uid gid uname grname #&gt; ./_common.R 2019-11-17 10:33:33 2000 2000 travis travis # 修改时间后，对比一下 Sys.setFileTime(path = &#39;./_common.R&#39;, time = Sys.time()) file.info(&#39;./_common.R&#39;) #&gt; size isdir mode mtime ctime #&gt; ./_common.R 2035 FALSE 664 2019-11-17 11:10:47 2019-11-17 11:10:47 #&gt; atime uid gid uname grname #&gt; ./_common.R 2019-11-17 11:10:47 2000 2000 travis travis strptime 用于字符串与 POSIXlt、 POSIXct 类对象之间的转化，format 默认 tz = \"\" 且 usetz = TRUE # 存放时区信息的数据库所在目录 list.files(file.path(R.home(&quot;share&quot;), &quot;zoneinfo&quot;)) #&gt; character(0) # 比较不同的打印方式 strptime(Sys.time(), format =&quot;%Y-%m-%d %H:%M:%S&quot;, tz = &quot;Asia/Taipei&quot;) #&gt; [1] &quot;2019-11-17 11:10:47 CST&quot; format(Sys.time(), format = &quot;%Y-%m-%d %H:%M:%S&quot;) # 默认情形 #&gt; [1] &quot;2019-11-17 11:10:47&quot; format(Sys.time(), format = &quot;%Y-%m-%d %H:%M:%S&quot;, tz = &quot;Asia/Taipei&quot;, usetz = TRUE) #&gt; [1] &quot;2019-11-17 19:10:47 CST&quot; 设置时区 Sys.timezone() #&gt; [1] &quot;UTC&quot; Sys.setenv(TZ = &quot;Asia/Shanghai&quot;) Sys.timezone() #&gt; [1] &quot;Asia/Shanghai&quot; 全局修改，在文件 /home/travis/R-bin/lib/R/etc/Rprofile.site 内添加Sys.setenv(TZ=\"Asia/Shanghai\")。 局部修改，就是在本地R项目下，创建 .Rprofile，然后同样添加 Sys.setenv(TZ=\"Asia/Shanghai\")。 2.11 R 包管理 相关的函数大致有 apropos(&#39;package&#39;) #&gt; [1] &quot;.find.package&quot; &quot;.packages&quot; #&gt; [3] &quot;.packageStartupMessage&quot; &quot;.path.package&quot; #&gt; [5] &quot;$.package_version&quot; &quot;as.package_version&quot; #&gt; [7] &quot;aspell_package_C_files&quot; &quot;aspell_package_R_files&quot; #&gt; [9] &quot;aspell_package_Rd_files&quot; &quot;aspell_package_vignettes&quot; #&gt; [11] &quot;available.packages&quot; &quot;CRAN.packages&quot; #&gt; [13] &quot;download.packages&quot; &quot;find.package&quot; #&gt; [15] &quot;findPackageEnv&quot; &quot;format.packageInfo&quot; #&gt; [17] &quot;getClassPackage&quot; &quot;getPackageName&quot; #&gt; [19] &quot;install.packages&quot; &quot;installed.packages&quot; .... .packages(T) 已安装的 R 包 .packages(T) %&gt;% length() #&gt; [1] 193 available.packages 查询可用的 R 包 available.packages()[,&quot;Package&quot;] %&gt;% head() #&gt; A3 aaSEA ABACUS abbyyR abc abcADM #&gt; &quot;A3&quot; &quot;aaSEA&quot; &quot;ABACUS&quot; &quot;abbyyR&quot; &quot;abc&quot; &quot;abcADM&quot; 查询 repos 的 R 包 rforge &lt;- available.packages(repos = &quot;https://r-forge.r-project.org/&quot;) cran &lt;- available.packages(repos = &quot;https://mirrors.tuna.tsinghua.edu.cn/CRAN/&quot;) setdiff(rforge[, &quot;Package&quot;], cran[, &quot;Package&quot;]) download.packages 下载 R 包 download.packages(&quot;Rbooks&quot;, destdir = &quot;~/&quot;, repos = &quot;https://r-forge.r-project.org/&quot;) install.packages 安装 R 包 install.packages(&quot;rmarkdown&quot;) installed.packages 已安装的 R 包 installed.packages(fields = c(&quot;Package&quot;,&quot;Version&quot;)) %&gt;% head() remove.packages 卸载/删除/移除已安装的R包 remove.packages(&#39;rmarkdown&#39;) update.packages 更新已安装的 R 包 update.packages(ask = FALSE) old.packages 查看过时/可更新的 R 包 old.packages() %&gt;% head() #&gt; Package LibPath Installed Built ReposVer #&gt; Matrix &quot;Matrix&quot; &quot;/home/travis/R-bin/lib/R/library&quot; &quot;1.2-17&quot; &quot;4.0.0&quot; &quot;1.3-0&quot; #&gt; Repository #&gt; Matrix &quot;https://r-forge.r-project.org/src/contrib&quot; new.packages 还没有安装的 R 包 new.packages() %&gt;% head() #&gt; [1] &quot;A2&quot; &quot;A3&quot; &quot;a4Core&quot; &quot;a4Reporting&quot; &quot;aaSEA&quot; #&gt; [6] &quot;ABACUS&quot; packageStatus 查看已安装的 R 包状态，可更新、可下载等 packageStatus() #&gt; Number of installed packages: #&gt; #&gt; ok upgrade unavailable #&gt; /home/travis/R/Library 164 0 0 #&gt; /usr/local/lib/R/site-library 0 0 0 #&gt; /home/travis/R-bin/lib/R/library 28 1 0 #&gt; #&gt; Number of available packages (each package counted only once): #&gt; #&gt; installed not installed #&gt; https://cloud.r-project.org/src/contrib 172 14897 #&gt; https://nowosad.github.io/drat/src/contrib 1 0 #&gt; https://r-forge.r-project.org/src/contrib 6 1273 packageDescription 查询 R 包描述信息 packageDescription(&#39;graphics&#39;) #&gt; Package: graphics #&gt; Version: 4.0.0 #&gt; Priority: base #&gt; Title: The R Graphics Package #&gt; Author: R Core Team and contributors worldwide #&gt; Maintainer: R Core Team &lt;R-core@r-project.org&gt; .... 查询 R 包的依赖关系 # rmarkdown 依赖的 R 包 tools::package_dependencies(&#39;rmarkdown&#39;, recursive = TRUE) #&gt; $rmarkdown #&gt; [1] &quot;tools&quot; &quot;utils&quot; &quot;knitr&quot; &quot;yaml&quot; &quot;htmltools&quot; &quot;evaluate&quot; #&gt; [7] &quot;base64enc&quot; &quot;jsonlite&quot; &quot;mime&quot; &quot;tinytex&quot; &quot;xfun&quot; &quot;methods&quot; #&gt; [13] &quot;stringr&quot; &quot;digest&quot; &quot;Rcpp&quot; &quot;rlang&quot; &quot;highr&quot; &quot;markdown&quot; #&gt; [19] &quot;glue&quot; &quot;magrittr&quot; &quot;stringi&quot; &quot;stats&quot; # 依赖 rmarkdown 的 R 包 tools::dependsOnPkgs(&#39;rmarkdown&#39;, recursive = TRUE) #&gt; [1] &quot;bookdown&quot; &quot;reprex&quot; &quot;tidyverse&quot; ggplot2 生态，仅列出以 gg 开头的 R 包 pdb &lt;- available.packages() gg &lt;- tools::dependsOnPkgs(&quot;ggplot2&quot;, recursive = FALSE, installed = pdb) grep(&quot;^gg&quot;, gg, value = TRUE) #&gt; [1] &quot;ggallin&quot; &quot;ggalluvial&quot; &quot;ggalt&quot; #&gt; [4] &quot;gganimate&quot; &quot;ggasym&quot; &quot;ggbeeswarm&quot; #&gt; [7] &quot;ggBubbles&quot; &quot;ggbuildr&quot; &quot;ggChernoff&quot; #&gt; [10] &quot;ggconf&quot; &quot;ggcorrplot&quot; &quot;ggdag&quot; #&gt; [13] &quot;ggdark&quot; &quot;ggdemetra&quot; &quot;ggdendro&quot; #&gt; [16] &quot;ggdistribute&quot; &quot;ggdmc&quot; &quot;ggedit&quot; #&gt; [19] &quot;ggenealogy&quot; &quot;ggetho&quot; &quot;ggExtra&quot; #&gt; [22] &quot;ggfan&quot; &quot;ggfittext&quot; &quot;ggfocus&quot; #&gt; [25] &quot;ggforce&quot; &quot;ggformula&quot; &quot;ggfortify&quot; #&gt; [28] &quot;gg.gap&quot; &quot;gggenes&quot; &quot;ggghost&quot; #&gt; [31] &quot;ggguitar&quot; &quot;gghalfnorm&quot; &quot;gghalves&quot; #&gt; [34] &quot;gghighlight&quot; &quot;ggimage&quot; &quot;gginference&quot; #&gt; [37] &quot;gginnards&quot; &quot;ggiraph&quot; &quot;ggiraphExtra&quot; #&gt; [40] &quot;ggjoy&quot; &quot;gglogo&quot; &quot;ggloop&quot; #&gt; [43] &quot;gglorenz&quot; &quot;ggmap&quot; &quot;ggmcmc&quot; #&gt; [46] &quot;ggmosaic&quot; &quot;ggmsa&quot; &quot;ggmuller&quot; #&gt; [49] &quot;ggnetwork&quot; &quot;ggnewscale&quot; &quot;ggnormalviolin&quot; #&gt; [52] &quot;ggpage&quot; &quot;ggparallel&quot; &quot;ggparliament&quot; #&gt; [55] &quot;ggparty&quot; &quot;ggperiodic&quot; &quot;ggplotAssist&quot; #&gt; [58] &quot;ggplotgui&quot; &quot;ggplotify&quot; &quot;ggplot.multistats&quot; #&gt; [61] &quot;ggpmisc&quot; &quot;ggPMX&quot; &quot;ggpointdensity&quot; #&gt; [64] &quot;ggpol&quot; &quot;ggpolypath&quot; &quot;ggpubr&quot; #&gt; [67] &quot;ggpval&quot; &quot;ggQC&quot; &quot;ggQQunif&quot; #&gt; [70] &quot;ggquickeda&quot; &quot;ggquiver&quot; &quot;ggRandomForests&quot; #&gt; [73] &quot;ggraph&quot; &quot;ggraptR&quot; &quot;ggrasp&quot; #&gt; [76] &quot;ggrepel&quot; &quot;ggResidpanel&quot; &quot;ggridges&quot; #&gt; [79] &quot;ggROC&quot; &quot;ggsci&quot; &quot;ggseas&quot; #&gt; [82] &quot;ggseqlogo&quot; &quot;ggsignif&quot; &quot;ggsn&quot; #&gt; [85] &quot;ggsoccer&quot; &quot;ggsolvencyii&quot; &quot;ggsom&quot; #&gt; [88] &quot;ggspatial&quot; &quot;ggspectra&quot; &quot;ggstance&quot; #&gt; [91] &quot;ggstatsplot&quot; &quot;ggswissmaps&quot; &quot;ggtern&quot; #&gt; [94] &quot;ggThemeAssist&quot; &quot;ggthemes&quot; &quot;ggTimeSeries&quot; #&gt; [97] &quot;ggupset&quot; &quot;ggVennDiagram&quot; &quot;ggvoronoi&quot; #&gt; [100] &quot;ggwordcloud&quot; &quot;ggplotFL&quot; 重装R包，与 R 版本号保持一致 db &lt;- installed.packages() db &lt;- as.data.frame(db, stringsAsFactors = FALSE) pkgs &lt;- db[db$Built &lt; getRversion(), &quot;Package&quot;] install.packages(pkgs) 2.12 查找函数 lookup R 函数完整定义，包括编译的代码，S3 和 S4 方法。目前 lookup 包处于开发版，我们可以用 remotes::install_github 函数来安装它 # install.packages(&quot;remotes&quot;) remotes::install_github(&quot;jimhester/lookup&quot;) R-level 的源代码都可以直接看 body #&gt; function (fun = sys.function(sys.parent())) #&gt; { #&gt; if (is.character(fun)) #&gt; fun &lt;- get(fun, mode = &quot;function&quot;, envir = parent.frame()) #&gt; .Internal(body(fun)) #&gt; } #&gt; &lt;bytecode: 0x4e34578&gt; #&gt; &lt;environment: namespace:base&gt; 此外，lookup 可以定位到 C-level 的源代码，需要联网才能查看，lookup 基于 Winston Chang 在 Github 上维护的 R 源码镜像 lookup(body) base::body [closure] function (fun = sys.function(sys.parent())) { if (is.character(fun)) fun &lt;- get(fun, mode = &quot;function&quot;, envir = parent.frame()) .Internal(body(fun)) } &lt;bytecode: 0x00000000140d6158&gt; &lt;environment: namespace:base&gt; // c source: src/main/builtin.c#L264-L277 SEXP attribute_hidden do_body(SEXP call, SEXP op, SEXP args, SEXP rho) { checkArity(op, args); if (TYPEOF(CAR(args)) == CLOSXP) { SEXP b = BODY_EXPR(CAR(args)); RAISE_NAMED(b, NAMED(CAR(args))); return b; } else { if(!(TYPEOF(CAR(args)) == BUILTINSXP || TYPEOF(CAR(args)) == SPECIALSXP)) warningcall(call, _(&quot;argument is not a function&quot;)); return R_NilValue; } } 2.13 运行环境 xfun::session_info(packages = c(&quot;magrittr&quot;, &quot;fs&quot;)) #&gt; R Under development (unstable) (2019-11-17 r77427) #&gt; Platform: x86_64-pc-linux-gnu (64-bit) #&gt; Running under: Ubuntu 16.04.6 LTS #&gt; #&gt; Locale: #&gt; LC_CTYPE=en_US.UTF-8 LC_NUMERIC=C #&gt; LC_TIME=en_US.UTF-8 LC_COLLATE=en_US.UTF-8 #&gt; LC_MONETARY=en_US.UTF-8 LC_MESSAGES=en_US.UTF-8 #&gt; LC_PAPER=en_US.UTF-8 LC_NAME=C #&gt; LC_ADDRESS=C LC_TELEPHONE=C #&gt; LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C #&gt; #&gt; Package version: #&gt; fs_1.3.1 graphics_4.0.0 grDevices_4.0.0 magrittr_1.5 #&gt; methods_4.0.0 Rcpp_1.0.3 stats_4.0.0 utils_4.0.0 https://github.com/libarchive/libarchive/wiki/FormatTar↩︎ 继 Rtools35 之后， RTools40 主要为 R 3.6.0 准备的，包含有 GCC 8 及其它编译R包需要的工具包，详情请看的幻灯片↩︎ https://github.com/rwinlib/utils↩︎ "],
["99-references.html", "参考文献", " 参考文献 "]
]
